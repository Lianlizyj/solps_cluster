#!/bin/bash

# function: create the sequence, which is formated, for parameter scan

# ====================== read in the parameter range =============== #
echo -e "Please enter which parameter you want to scan!\n"
echo -e  "Core density and input power scan is available!\n"
echo -e  "Please enter 'den' or 'pow' correspondingly!\n"
read -p "Please selete the parameter(e.g. den[c/s]/pow[c/s]): " para_selete
read -p "Please enter base case name(e.g. sd): " base_case
case ${para_selete} in
den | Den) echo
	echo "OK, you selete core density scan."
	read -p "Please enter the initial denstiy(e.g. 3.0(default:*1e19)): " init_den
	init_den="${init_den}00E+19"
	echo "${init_den}"	;;
pow | Pow) echo
	echo "OK, you selete input power scan."
	read -p "Please enter the initial power(e.g. 3.0(default:*1e6)): " init_pow
        pe=`echo "scale=1;${init_pow} / 2"|bc` # equal to init_pow / 2
        pe="${pe}e6"
        echo "enepar is: ${pe}";;
esac
# ===================== selete the method which creating the parameter list ============== #
read -p "Do you want to create parameter list by sequence? [y | n]: " flag
if [ ${flag} == 'y' ] 
then
	echo "OK, you selete sequence method. Please tell me follow information."
	# ================== callback sequence method ===================== #
	read -p "Please enter the start value(e.g. 1): " beg
	read -p "Please enter the step value (e.g. 0.5): " step
	read -p "Please enter the end value (e.g. 6):" last
	# ============== create the formated parameter sequence ============ #
	rm parameter_list &> /dev/null
	rm mid_name &> /dev/null
	rm mid_para &> /dev/null
	# ================== create name file ============================== #
	for i in `seq   ${beg} ${step} ${last}`
	do
		echo ${i} | cat >> mid_name
	done
	# ======================== create parameter list =================== #
	if [ ${para_selete} == 'den' ]
	then
		for i in `seq -f "%1.2f0E+19" ${beg} ${step} ${last}`
		do
			printf "%1.3E\n" ${i} | cat >> mid_para
		done
	elif [ ${para_selete} == 'pow' ]
	then
		# ================= start、step、end /2 ================== #
		beg=`echo "scale=3;${beg} / 2"|bc`
		step=`echo "scale=3;${step} / 2"|bc`
		last=`echo "scale=3;${last} / 2"|bc`
		for i in `seq -f "%1.3fE+6" ${beg} ${step} ${last}`
		do
			printf "%1.3E\n" ${i} | cat >> mid_para
		done
	else
		echo "Developing, you will quit. See you later!"
		exit 0
	fi 		
	# ======================== paste parameter_list and mid_name ======= #
	paste -d " " mid_para  mid_name > parameter
	awk '{gsub(/\./,"_",$2);print $0}' parameter | cat > parameter_list
	rm parameter &> /dev/null 
	rm mid_para &> /dev/null # don't display error
	rm mid_name &> /dev/null
elif [ ${flag} == 'n' ]	
then
	echo "OK,you selete random sequence method. Please create parameter list by calling create_para"
	echo "e.g. exp 3 4 5 6 9 12"
	read -p "Have you create the parameter list? [ y | n]: " flag_create

	if [ ${flag_create} == 'y' ]
	then
		echo "Well done, scripts contine!"
	elif [ ${flag_create} == 'n' ]
	then
		echo "Please create parameter list by above method."
		echo "Script will stop. See you later!"
		exit 0
	else 
		echo "You are so handsome!"
		exit 0
	fi
else 
	echo "Game over. Script stop! See you next time. "	
fi

# ===================== create the case cluster name =============== #
read -p "Please enter the basename (e.g. 3MW-C):" base_name
case ${para_selete} in
den | Den) echo
        base_name="e19-${base_name}-den";;
pow | Pow) echo
        base_name="MW-${base_name}-pow";;
esac
echo "case basename is ${base_name}"

# ==================== read in the SLUM revelenet parameters ======= #
read -p "Please enter the jobname (e.g. test):" job_name

# ================== read the parameter scan list ================== #
path=`pwd` # get the current path
mkdir baserun # case running need this directory
rm case_name &> /dev/null # delete the old case_name file
echo ${para_selete}
# ============================ switch parameter scan =============== #

if [ ${para_selete} == 'den' ]
then
	echo "You selete core density scan."
	while read -r line name
	do
		#echo ${line}
		#echo ${name}
                complete_name=${name}${base_name}
		echo ${complete_name} | cat >> case_name
		cp -r ${base_case} ${complete_name}
        	pp="${path}/${complete_name}/b2.boundary.parameters" # case path
		pp1="${path}/${complete_name}/SLURM.DUT-PSI-forSOLPS" # case path
		echo "${pp}"
        	# =============== modify the core  density ================= #
        	sed -i "/conpar(0,1,1)/s/${init_den}/${line}/g" ${pp}
		grep "conpar(0,1,1)" ${pp}
		# ================= modify the job name ==================== #
		slum="${line:0:3}-${para_selete}"
		sed -i "/J/s/${job_name}/${slum}/g" ${pp1}
        	grep "J" ${pp1}
	done < parameter_list
elif [ ${para_selete} == 'pow' ] 
then	
	echo "You selete power scan!"
        while read -r line name
        do
		# ================== get the total power =================== #
		#echo ${line}
		#echo ${pe}
                complete_name=${name}${base_name}
                echo ${complete_name} | cat >> case_name
                cp -r ${base_case} ${complete_name}
                pp="${path}/${complete_name}/b2.boundary.parameters" # case path
                pp1="${path}/${complete_name}/SLURM.DUT-PSI-forSOLPS" # case path
                echo "${pp}"
                # ===== modify the psol including enepar and enipar ======== #
 			# power boundary
       		sed -i "/enepar/s/${pe}/${line}/g" ${pp}
  		grep enepar ${pp}
		sed -i "/enipar/s/${pe}/${line}/g" ${pp}
        	grep enipar ${pp}
		# ================= modify the job name ==================== #
                slum="${name}-${para_selete}"
                sed -i "/J/s/${job_name}/${slum}/g" ${pp1}
                grep "J" ${pp1}
        done < parameter_list
else
	echo "Other parameter scan is developping."
fi
